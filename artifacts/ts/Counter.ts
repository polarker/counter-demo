/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as CounterContractJson } from "../Counter.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace CounterTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    totalSupply: bigint;
    rewardPerReduction: bigint;
    owner: Address;
    count: bigint;
    countDecimals: bigint;
  };

  export type State = ContractState<Fields>;

  export type CountIncreasedEvent = ContractEvent<{ num: bigint }>;
  export type CountDecreasedEvent = ContractEvent<{
    num: bigint;
    to: Address;
    rewardAmount: bigint;
  }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getCurrentCount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<CounterInstance, CounterTypes.Fields> {
  consts = { InvalidCaller: BigInt(0) };

  at(address: string): CounterInstance {
    return new CounterInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<TestContractParams<CounterTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<TestContractParams<CounterTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getDecimals: async (
      params: Omit<TestContractParams<CounterTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: Omit<TestContractParams<CounterTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalSupply", params);
    },
    getCurrentCount: async (
      params: Omit<TestContractParams<CounterTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getCurrentCount", params);
    },
    increase: async (
      params: TestContractParams<CounterTypes.Fields, { num: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "increase", params);
    },
    decrease: async (
      params: TestContractParams<
        CounterTypes.Fields,
        { num: bigint; to: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "decrease", params);
    },
    setOwner: async (
      params: TestContractParams<CounterTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Counter = new Factory(
  Contract.fromJson(
    CounterContractJson,
    "",
    "0c066322165e9654940a30e179ecbc93765e4265b88def01170491f525b5ed0d"
  )
);

// Use this class to interact with the blockchain
export class CounterInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<CounterTypes.State> {
    return fetchContractState(Counter, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeCountIncreasedEvent(
    options: SubscribeOptions<CounterTypes.CountIncreasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Counter.contract,
      this,
      options,
      "CountIncreased",
      fromCount
    );
  }

  subscribeCountDecreasedEvent(
    options: SubscribeOptions<CounterTypes.CountDecreasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Counter.contract,
      this,
      options,
      "CountDecreased",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      CounterTypes.CountIncreasedEvent | CounterTypes.CountDecreasedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Counter.contract, this, options, fromCount);
  }

  methods = {
    getSymbol: async (
      params?: CounterTypes.CallMethodParams<"getSymbol">
    ): Promise<CounterTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        Counter,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: CounterTypes.CallMethodParams<"getName">
    ): Promise<CounterTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Counter,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: CounterTypes.CallMethodParams<"getDecimals">
    ): Promise<CounterTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        Counter,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: CounterTypes.CallMethodParams<"getTotalSupply">
    ): Promise<CounterTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        Counter,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCurrentCount: async (
      params?: CounterTypes.CallMethodParams<"getCurrentCount">
    ): Promise<CounterTypes.CallMethodResult<"getCurrentCount">> => {
      return callMethod(
        Counter,
        this,
        "getCurrentCount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends CounterTypes.MultiCallParams>(
    calls: Calls
  ): Promise<CounterTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Counter,
      this,
      calls,
      getContractByCodeHash
    )) as CounterTypes.MultiCallResults<Calls>;
  }
}
